#Identification of differential expressed immune-related genes(DEIRGs)
library(edgeR)
logFCfiler=0              
fdrFilter=0.05               
conNum=192                   
treatNum=183                  
setwd("D:\\")                  
rt=read.table("sampleExp.txt",sep="\t",header=T,check.names=F)         
rt=as.matrix(rt)
rownames(rt)=rt[,1]
exp=rt[,2:ncol(rt)]
dimnames=list(rownames(exp),colnames(exp))
data=matrix(as.numeric(as.matrix(exp)),nrow=nrow(exp),dimnames=dimnames)
data=avereps(data)
data=data[rowMeans(data)>1,]
group=c(rep("Wild_TP53",conNum),rep("Mut_TP53",treatNum))
design <- model.matrix(~group)
y <- DGEList(counts=data,group=group)
y <- calcNormFactors(y)
y <- estimateCommonDisp(y)
y <- estimateTagwiseDisp(y)
et <- exactTest(y,pair = c("W","M"))
ordered_tags <- topTags(et, n=100000)
allDiff=ordered_tags$table
allDiff=allDiff[is.na(allDiff$FDR)==FALSE,]
diff=allDiff
newData=y$pseudo.counts
write.table(diff,file="all.xls",sep="\t",quote=F)
diffSig = diff[(diff$FDR < fdrFilter & (diff$logFC>logFCfiler | diff$logFC<(-logFCfiler))),]
diffSigOut=rbind(id=colnames(diffSig),diffSig)
write.table(diffSigOut, file="diff.xls",sep="\t",quote=F,col.names=F)
write.table(diffSigOut, file="diff.txt",sep="\t",quote=F,col.names=F)
normalizeExp=rbind(id=colnames(newData),newData)
write.table(normalizeExp,file="normalExp.txt",sep="\t",quote=F,col.names=F)   
diffExp=rbind(id=colnames(newData),newData[rownames(diffSig),])
write.table(diffExp,file="diffExp.txt",sep="\t",quote=F,col.names=F)          
## Construction of immune gene pairs 
tcgaPair=data.frame()
rt = read.table("TCGA-ImmuneExp.txt",header=T,sep="\t",check.names=F,row.names=1)
sampleNum=ncol(rt)
for(i in 1:(nrow(rt)-1)){
	for(j in (i+1):nrow(rt)){
		pair=ifelse(rt[i,]>rt[j,],1,0)
		pairRatio=sum(pair)/sampleNum
		if((pairRatio>0.2)&(pairRatio<0.8)){
			rownames(pair)=paste0(rownames(rt)[i],"|",rownames(rt)[j])
			tcgaPair=rbind(tcgaPair,pair)
		}
	}
}
geoPair=data.frame()
rt = read.table("GEO-ImmuneExp.txt",header=T,sep="\t",check.names=F,row.names=1)
sampleNum=ncol(rt)
for(i in 1:(nrow(rt)-1)){
	for(j in (i+1):nrow(rt)){
		pair=ifelse(rt[i,]>rt[j,],1,0)
		pairRatio=sum(pair)/sampleNum
		if((pairRatio>0.2)&(pairRatio<0.8)){
			rownames(pair)=paste0(rownames(rt)[i],"|",rownames(rt)[j])
			geoPair=rbind(geoPair,pair)
		}
	}
}
sameGene=intersect(row.names(tcgaPair),row.names(geoPair))
tcgaOut=tcgaPair[sameGene,]
geoOut=geoPair[sameGene,]
tcgaOut=rbind(ID=colnames(tcgaOut),tcgaOut)
write.table(tcgaOut,file="tcgaGP.txt",sep="\t",quote=F,col.names=F)
geoOut=rbind(ID=colnames(geoOut),geoOut)
write.table(geoOut,file="geoGP.txt",sep="\t",quote=F,col.names=F)
###Construction and validation of the immune gene pairs prognostic model
pFilter=                            
library(survival)                                                 
rt=read.table("tcga-IGP.txt",header=T,sep="\t",check.names=F,row.names=1)      
sigGenes=c("futime","fustat")
outTab=data.frame()
for(i in colnames(rt[,3:ncol(rt)])){
 cox <- coxph(Surv(futime, fustat) ~ rt[,i], data = rt)
 coxSummary = summary(cox)
 coxP=coxSummary$coefficients[,"Pr(>|z|)"]
 outTab=rbind(outTab,
              cbind(id=i,
              HR=coxSummary$conf.int[,"exp(coef)"],
              HR.95L=coxSummary$conf.int[,"lower .95"],
              HR.95H=coxSummary$conf.int[,"upper .95"],
              pvalue=coxSummary$coefficients[,"Pr(>|z|)"])
              )
  if(coxP<pFilter){
      sigGenes=c(sigGenes,i)
  }
}
write.table(outTab,file="uniCox.xls",sep="\t",row.names=F,quote=F)
uniSigExp=rt[,sigGenes]
uniSigExp=cbind(id=row.names(uniSigExp),uniSigExp)
write.table(uniSigExp,file="uniSigExp.txt",sep="\t",row.names=F,quote=F)
library("glmnet")
library("survival")
rt=read.table("uniSigExp.txt",header=T,sep="\t",row.names=1,check.names=F)    
rt$futime[rt$futime<=0]=1
x=as.matrix(rt[,c(3:ncol(rt))])
y=data.matrix(Surv(rt$futime,rt$fustat))
fit <- glmnet(x, y, family = "cox", maxit = 1000)
pdf("lambda.pdf")
plot(fit, xvar = "lambda", label = TRUE)
dev.off()
cvfit <- cv.glmnet(x, y, family="cox", maxit = 1000)
pdf("cvfit.pdf")
plot(cvfit)
abline(v=log(c(cvfit$lambda.min,cvfit$lambda.1se)),lty="dashed")
dev.off()
coef <- coef(fit, s = cvfit$lambda.min)
index <- which(coef != 0)
actCoef <- coef[index]
lassoGene=row.names(coef)[index]
lassoGene=c("futime","fustat",lassoGene)
lassoSigExp=rt[,lassoGene]
lassoSigExp=cbind(id=row.names(lassoSigExp),lassoSigExp)
write.table(lassoSigExp,file="lassoSigExp.txt",sep="\t",row.names=F,quote=F)
library(survival)
library(survminer)
rt=read.table("lassoSigExp.txt",header=T,sep="\t",check.names=F,row.names=1)  
rt[,"futime"]=rt[,"futime"]/365
multiCox=coxph(Surv(futime, fustat) ~ ., data = rt)
multiCox=step(multiCox,direction = "both")
multiCoxSum=summary(multiCox)
outTab=data.frame()
outTab=cbind(
             coef=multiCoxSum$coefficients[,"coef"],
             HR=multiCoxSum$conf.int[,"exp(coef)"],
             HR.95L=multiCoxSum$conf.int[,"lower .95"],
             HR.95H=multiCoxSum$conf.int[,"upper .95"],
             pvalue=multiCoxSum$coefficients[,"Pr(>|z|)"])
outTab=cbind(id=row.names(outTab),outTab)
write.table(outTab,file="multiCox.xls",sep="\t",row.names=F,quote=F)
riskScore=predict(multiCox,type="risk",newdata=rt)          
coxGene=rownames(multiCoxSum$coefficients)
coxGene=gsub("`","",coxGene)
outCol=c("futime","fustat",coxGene)
medianTrainRisk=median(riskScore)
risk=as.vector(ifelse(riskScore>medianTrainRisk,"high","low"))
write.table(cbind(id=rownames(cbind(rt[,outCol],riskScore,risk)),cbind(rt[,outCol],riskScore,risk)),
    file="riskTrain.txt",
    sep="\t",
    quote=F,
    row.names=F)
rtTest=read.table("GSE84437-GP.txt",header=T,sep="\t",check.names=F,row.names=1)    
#rtTest=read.table("GSE15459-GP.txt",header=T,sep="\t",check.names=F,row.names=1)    
#rtTest=read.table("GSE62254-GP.txt",header=T,sep="\t",check.names=F,row.names=1)    
#rtTest=read.table("GSE26901-GP.txt",header=T,sep="\t",check.names=F,row.names=1)         
rtTest[,"futime"]=rtTest[,"futime"]/365
riskScoreTest=predict(multiCox,type="risk",newdata=rtTest)      
riskTest=as.vector(ifelse(riskScoreTest>medianTrainRisk,"high","low"))
write.table(cbind(id=rownames(cbind(rtTest[,outCol],riskScoreTest,riskTest)),cbind(rtTest[,outCol],riskScore=riskScoreTest,risk=riskTest)),
    file="riskTest.txt",
    sep="\t",
    quote=F,
    row.names=F)